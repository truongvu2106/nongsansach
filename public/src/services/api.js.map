{"version":3,"sources":["services/api.ts"],"names":[],"mappings":"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","file":"api.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport { Config } from '../config';\nimport { Cookie } from 'ng2-cookies';\n\n@Injectable()\nexport class API {\n    private config = Config;\n    constructor(private http: Http) {\n    }\n    get(uri) {\n        let self = this;\n        let requestOptions = self.getRequestOptions();\n        return self.http.get(self.config.apiURI + uri, requestOptions)\n            .toPromise()\n            .then(self.extractData)\n            .catch(self.handleError);\n    }\n    post(uri, data) {\n        let self = this;\n        let requestOptions = self.getRequestOptions();\n\n        data = JSON.stringify(data);\n        return self.http.post(self.config.apiURI + uri, data, requestOptions)\n            .toPromise()\n            .then(self.extractData)\n            .catch(self.handleError);\n    }\n    put(uri, data) {\n        let self = this;\n        let requestOptions = self.getRequestOptions();\n        data = JSON.stringify(data);\n        return self.http.put(self.config.apiURI + uri, data, requestOptions)\n            .toPromise()\n            .then(self.extractData)\n            .catch(self.handleError);\n    }\n    delete(uri) {\n        let self = this;\n        let requestOptions = self.getRequestOptions();\n        return self.http.delete(self.config.apiURI + uri, requestOptions)\n            .toPromise()\n            .then(self.extractData)\n            .catch(self.handleError);\n    }\n    private extractData(res: Response) {\n        let body = res.json();\n        return body || {};\n    }\n    private handleError(error: any) {\n        // In a real world app, we might use a remote logging infrastructure\n        // We'd also dig deeper into the error to get a better message\n        let errMsg = (error.message) ? error.message :\n            error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        throw errMsg;\n    }\n\n    private getRequestOptions() {\n        let headers = new Headers({ 'Content-Type': 'application/json' });\n\n        // let token = self.authService.getAccessToken();\n        let token = Cookie.get('accessToken');\n\n        if (token) {\n            headers.append('x-access-token', token);\n        }\n        return new RequestOptions({ headers: headers });\n    }\n}\n"]}
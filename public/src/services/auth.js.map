{"version":3,"sources":["services/auth.ts"],"names":[],"mappings":"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","file":"auth.js","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Router } from '@angular/router';\nimport { Cookie } from 'ng2-cookies';\nimport { API } from './api';\n\n@Injectable()\nexport class AuthService {\n    public isLoggedIn: EventEmitter<any> = new EventEmitter();\n    constructor(private api: API, private router: Router) {\n    }\n\n    /* Private */\n\n    private _setAccessToken(accessToken) {\n        Cookie.set('accessToken', accessToken);\n    }\n\n    private _setAccount(account) {\n        Cookie.set('account', account);\n    }\n\n    private _handleData(data) {\n        this._setAccessToken(data.token);\n        this._setAccount(JSON.stringify(data.user));\n        this.isLoggedIn.emit(this.authenticated());\n    }\n\n    retrieveToken() {\n        var self = this;\n        return self.api.get('/oauth/token');\n    }\n\n    authenticate(credentials) {\n        let self = this;\n        return self.api.post('/auth', credentials)\n            .then(function(data) {\n                self._setAccessToken(data.token);\n                self._setAccount(JSON.stringify(data.user));\n                self.isLoggedIn.emit(self.authenticated());\n                return data;\n            });\n    }\n\n    loginOAuth(tokens) {\n        let self = this;\n        return self.api.post('/oauth/signin', tokens)\n            .then(function(data) {\n                // self._setAccessToken(tokens.accessToken);\n                self._setAccessToken(data.token);\n                self._setAccount(JSON.stringify(data.user));\n                self.isLoggedIn.emit(self.authenticated());\n            });\n    }\n\n    getAccessToken() {\n        return Cookie.get('accessToken');\n    }\n\n    authenticated() {\n        return !!this.getAccessToken() && !!this.getAccount();\n    }\n\n    getAccount() {\n        try {\n            return JSON.parse(Cookie.get('account'));\n        } catch(err) {\n            return '';\n        }\n    }\n\n    deauthenticate() {\n        // Remove cookies.\n        Cookie.delete('account');\n        Cookie.delete('accessToken');\n        this.isLoggedIn.emit(this.authenticated());\n    }\n\n    checkLoggedIn() {\n        return Observable.of(this.authenticated());\n    }\n\n}"]}
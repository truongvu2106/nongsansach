{"version":3,"sources":["components/imageUploader/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAmE,eAAe,CAAC,CAAA;AACnF,uBAAuC,iBAAiB,CAAC,CAAA;AACzD,uBAAuB,cAAc,CAAC,CAAA;AACtC,sBAA6B,sBAAsB,CAAC,CAAA;AACpD,qBAA4B,qBAAqB,CAAC,CAAA;AAQlD;IAWI,uBAAoB,WAAwB,EAChC,YAA0B,EAAU,MAAc;QAD1C,gBAAW,GAAX,WAAW,CAAa;QAChC,iBAAY,GAAZ,YAAY,CAAc;QAAU,WAAM,GAAN,MAAM,CAAQ;QAX9D,WAAM,GAAU,EAAE,CAAC;QACX,WAAM,GAAG,eAAM,CAAC;QAEhB,aAAQ,GAAW,CAAC,CAAC;QACrB,cAAS,GAAU,EAAE,CAAC;QAEvB,gBAAW,GAAU,EAAE,CAAC;QACxB,iBAAY,GAAU,EAAE,CAAC;QACzB,iBAAY,GAAsB,IAAI,mBAAY,EAAE,CAAC;IAGK,CAAC;IAElE,gCAAQ,GAAR;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,aAAM,CAAC,EAAE,oBAAoB,EAAE,KAAK,EAAE,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,GAAG;YACX,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,QAAQ;YAClC,UAAU,EAAE,GAAG;YACf,cAAc,EAAE,IAAI;YACpB,UAAU,EAAE,KAAK;YACjB,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE;gBACX,gBAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE;aACtD;SACJ,CAAC;IACN,CAAC;IAED,4CAAoB,GAApB,UAAqB,IAAS;QAC1B,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,EAAhB,CAAgB,CAAC,CAAC;QAC5D,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,OAAK,GAAG,CAAC,CAAC;YACd,IAAI,UAAQ,GAAG,CAAC,CAAC;YACjB,IAAI,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;YAC5C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAA,IAAI;gBACvB,OAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAC7B,UAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;YACrC,CAAC,CAAC,CAAC;YACH,IAAI,SAAO,GAAG,GAAG,GAAG,UAAQ,GAAG,OAAK,CAAC;YAErC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;gBACV,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;gBAC7B,IAAI,CAAC,QAAQ,GAAG,SAAO,CAAC;gBACxB,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzC,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;oBACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAE/B,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IAED,yCAAiB,GAAjB,UAAkB,IAAS;QACvB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED,gCAAQ,GAAR,UAAS,KAAK;QACV,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC;IAC/C,CAAC;IAED,mCAAW,GAAX;QACI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC1C,CAAC;IAxEL;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,gBAAgB;YAC1B,WAAW,EAAE,yCAAyC;YACtD,SAAS,EAAE,CAAE,oBAAY,CAAE;SAC9B,CAAC;;qBAAA;IAsEF,oBAAC;AAAD,CApEA,AAoEC,IAAA;AApEY,qBAAa,gBAoEzB,CAAA","file":"index.js","sourcesContent":["import { Component, OnInit, OnDestroy, NgZone, EventEmitter } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Config } from '../../config';\nimport { ImageService } from '../../services/image';\nimport { AuthService } from '../../services/auth';\n\n@Component({\n    selector: 'image-uploader',\n    templateUrl: 'src/components/imageUploader/index.html',\n    providers: [ ImageService ]\n})\n\nexport class ImageUploader implements OnInit {\n    images: any[] = [];\n    private config = Config;\n    private zone: NgZone;\n    private progress: number = 0;\n    private responses: any[] = [];\n    public options: Object;\n    public previewData: any[] = [];\n    public previewFiles: any[] = [];\n    public uploadEvents: EventEmitter<any> = new EventEmitter();\n\n    constructor(private authService: AuthService,\n        private imageService: ImageService, private router: Router) {}\n\n    ngOnInit() {\n        this.zone = new NgZone({ enableLongStackTrace: false });\n        this.options = {\n            url: this.config.apiURI + '/files',\n            maxUploads: 100,\n            calculateSpeed: true,\n            autoUpload: false,\n            previewUrl: true,\n            customHeaders: {\n                'x-access-token': this.authService.getAccessToken()\n            }\n        };\n    }\n\n    handleMultipleUpload(data: any): void {\n        let self = this;\n        let index = self.responses.findIndex(x => x.id === data.id);\n        if (index === -1) {\n            self.responses.push(data);\n        } else {\n            let total = 0;\n            let uploaded = 0;\n            let responsesLength = self.responses.length;\n            self.responses.forEach(resp => {\n                total += resp.progress.total;\n                uploaded += resp.progress.loaded;\n            });\n            let percent = 100 * uploaded / total;\n\n            self.zone.run(() => {\n                self.responses[index] = data;\n                self.progress = percent;\n                let response = JSON.parse(data.response);\n                if (response._id) {\n                    self.images.push(response);\n                    // TODO - Remove image from previewData after uploaded\n                }\n            });\n        }\n    }\n\n    handlePreviewData(data: any): void {\n        this.previewData.push(data);\n    }\n\n    onChange(event) {\n        let self = this;\n        self.previewFiles = event.srcElement.files;\n    }\n\n    startUpload() {\n        this.uploadEvents.emit('startUpload');\n    }\n\n}\n"]}